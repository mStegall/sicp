* Exercise
Alyssa P. Hacker doesn't see why if needs to be provided as a special form. "Why can't I just define it as an ordinary procedure in terms of cond?" she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of if:

#+BEGIN_SRC scheme :tangle yes
(define (new-if predicate 
                then-clause 
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+END_SRC

Eva demonstrates the program for Alyssa:

#+BEGIN_SRC scheme
(new-if (= 2 3) 0 5)
5

(new-if (= 1 1) 0 5)
0
#+END_SRC

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+BEGIN_SRC scheme
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+END_SRC

What happens when Alyssa attempts to use this to compute square roots? Explain.

* Answer

In the special form the s-exp with the if operator is applied in normal-order.  So in the normal if statement the function is only recursively called if the condition is not met. In the ~new-if~ function applicative-order is used which means that both agurments are always evaluated meaning that the function call will never halt.
