* Exercise
Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+BEGIN_SRC scheme
(define (p) (p))

(define (test x y) 
  (if (= x 0) 
      0 
      y))
#+END_SRC

Then he evaluates the expression

#+BEGIN_SRC scheme
(test 0 (p))
#+END_SRC

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

* Answer
Under applicative order the argument ~(p)~ is repeatedly elvaluated and the function never exits. Under normal-order evaluation the outemost form is evaluated first to 0 and ~(p)~ is never evaluated.
